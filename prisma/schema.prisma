datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//////////////////////////
// Shared Helper Models //
//////////////////////////

// (Common types, enums, or helper models can be added here)

//////////////////////////
//  Application Models  //
//////////////////////////

model User {
  id                         String    @id @map("_id") @default(auto()) @db.ObjectId
  email                      String    @unique
  password                   String?
  method                     AuthType
  isVerified                 Boolean   @default(false)
  Name                       String
  birthDate                  DateTime?
  country                    String
  lastLogin                  DateTime?
  institution                String?
  phoneNumber                String?   
  linkedin                   String?   
  instagram                  String?
  facebook                   String?
  x                          String?
  imgThumbnail               String?
  plan                       planType? @default(trial_monthly)
  ExpirationSubscription     DateTime?
  createdAt                  DateTime? @default(now())
}


//////////////////////////
//     Course Models    //
//////////////////////////

model Course {
  id                  String   @id @map("_id") @default(auto()) @db.ObjectId
  userId              String? 
  email               String?  
  content             String
  type                String?
  mainTopic           String?
  language            String?
  photo               String?
  createdAt           DateTime @default(now())
  endedAt             DateTime?
}

/////////////////////////////
// Referral Program Models //
/////////////////////////////

model userReferredBy {
  id                          String   @id @map("_id") @default(auto()) @db.ObjectId
  userId                      String   @unique
  referredUserId              String
  email                       String   @unique
  referredUserEmail           String  
  date                        DateTime
  refCodeUsed                 String
  referringType               ReferringType
  referringSource             String?
}

model referralCode {
  id                          String   @id @map("_id") @default(auto()) @db.ObjectId
  userId                      String
  email                       String
  code                        String  @unique
  referredAmount              Int     @default(0)
}

//////////////////////////
//     Utils Models     //
//////////////////////////

model Token {
  id                      String    @id @map("_id") @default(auto()) @db.ObjectId
  token                   String
  email                   String
  userId                  String
  tokenExpires            DateTime
  tokenType               TokenType

  @@unique([userId, tokenType], name: "userId_tokenType")
}

model Streaker {
  id                      String   @id @map("_id") @default(auto()) @db.ObjectId
  userId                  String   @unique
  email                   String   @unique
  dateSign                DateTime @default(now())
  courseDo                Boolean  @default(false)
  quizDo                  Boolean  @default(false)
}

model Notifier {
  id                      String   @id @map("_id") @default(auto()) @db.ObjectId
  userId                  String   @unique 
  email                   String   @unique
  notify                  DateTime @default(now())
  notifyType              NotificationType @default(not_set)
}

model Transaction {
  id                String   @id @map("_id") @default(auto()) @db.ObjectId
  email             String   @unique
  duration          String
  subscriptionStart DateTime
  subscriptionEnd   DateTime
  orderId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  refunded          Boolean
}

//////////////////////////
//   Quiz Game Models   //
//////////////////////////

model Game {
  id          String     @id @map("_id") @default(auto()) @db.ObjectId
  userId      String     // Reference to User.id
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  language    String
  questions   Question[] @relation("GameQuestions")
}

model Question {
  id                String   @id @map("_id") @default(auto()) @db.ObjectId
  question          String
  answer            String
  gameId            String
  options           Json?
  percentageCorrect Float?
  questionType      GameType
  userAnswer        String?
  isCorrect         Boolean?
  game              Game     @relation("GameQuestions", fields: [gameId], references: [id])
}

model TopicCount {
  id    String @id @map("_id") @default(auto()) @db.ObjectId
  topic String @unique
  count Int
}

//////////////////////////
//       Enums          //
//////////////////////////

enum GameType {
  mcq
  open_ended
}

enum TokenType {
  email_validation
  password_reset
  access
  refresh
}

enum NotificationType {
  email_validation
  password_reset
  streak_course
  streak_quiz
  streak_sign
  streak_hit
  all_user
  update
  new_feature
  not_set
}

enum planType {
  trial_monthly
  trial_yearly
  charged_monthly
  charged_yearly
}

enum ReferringType {
  sign
  trial_monthly
  trial_yearly
  charged_monthly
  charged_yearly
}

enum AuthType {
  google
  normal
}