datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//////////////////////////
// Shared Helper Models //
//////////////////////////

// (You can add common types, enums or helper models here if needed)

//////////////////////////
//    Application Models
//////////////////////////

model Message {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  sender    String
  text      String
  imageUrl  String   @default("")
  timestamp DateTime @default(now())

  // Policies:
  // • Any authenticated user can create a message.
  // • Only the sender (by email) or an admin can read.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read", if: "session.userEmail == sender || isAdmin()")
}

model Admin {
  id      String   @id @map("_id") @default(auto()) @db.ObjectId
  email   String   @unique
  mName   String?
  type    String
  total   Int      @default(0)
  terms   String   @default("")
  privacy String   @default("")
  cancel  String   @default("")
  refund  String   @default("")
  billing String   @default("")

  // Only admin users may perform any operation on admin records.
  @@allow("create, read, update, delete", if: "isAdmin()")
}

model User {
  id                   String    @id @map("_id") @default(auto()) @db.ObjectId
  email                String    @unique
  isVerified           Boolean   @default(false)
  emailToken           String?
  emailTokenExpires    DateTime?
  mName                String?
  password             String
  type                 String    @default("free")
  plan                 String    @default("hobby")
  signUpApp            String    @default("AITeacher")
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  date                 DateTime  @default(now())
  refUserMail          String?
  streakId             String?
  lastLogin            DateTime?
  country              String?

  // Policies:
  // • Anyone can sign up.
  // • Users can read and update their own record.
  // • Only admins may delete a user.
  @@allow("create")
  @@allow("read", if: "session.userId == id || isAdmin()")
  @@allow("update", if: "session.userId == id")
  @@allow("delete", if: "isAdmin()")
}

model Course {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  user      String?  // ideally a reference to User.id
  email     String?
  content   String
  type      String?
  mainTopic String?
  language  String?
  photo     String?
  date      DateTime @default(now())
  end       DateTime @default(now())
  completed Boolean  @default(false)

  // Policies:
  // • Any authenticated user may create a course.
  // • Only the owner (by email or user id) or an admin may read.
  // • Only the owner may update or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read", if: "session.userEmail == email || session.userId == user || isAdmin()")
  @@allow("update, delete", if: "session.userEmail == email || session.userId == user")
}

model Subscription {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  user         String?  // consider renaming to userId if referencing User.id
  subscription String?
  subscriberId String?
  type         String?
  method       String?
  date         DateTime @default(now())
  active       Boolean  @default(true)

  // Policies:
  // • Only authenticated users may create subscriptions.
  // • Only the owner (by session.userEmail) or an admin may read, update, or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read, update, delete", if: "session.userEmail == user || isAdmin()")
}

model PaymentSubscription {
  id            String   @id @map("_id") @default(auto()) @db.ObjectId
  userId        String   // reference to User.id
  email         String
  paymentMethod String
  plan          String
  createdAt     DateTime @default(now())

  // Policies:
  // • Only authenticated users may create payment subscriptions.
  // • Only the owner (by email) or an admin may read, update, or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read, update, delete", if: "session.userEmail == email || isAdmin()")
}

model Contact {
  id    String   @id @map("_id") @default(auto()) @db.ObjectId
  fname String?
  lname String?
  email String?
  phone Int?
  msg   String?
  date  DateTime @default(now())

  // Policies:
  // • Anyone (even unauthenticated) may create a contact entry.
  // • Only an admin may read, update, or delete contact messages.
  @@allow("create")
  @@allow("read, update, delete", if: "isAdmin()")
}

model Streaker {
  id                 String   @id @map("_id") @default(auto()) @db.ObjectId
  userId             String
  email              String
  signQuiz           Boolean  @default(false)
  signQuizNotify     Boolean  @default(false)
  signTeacherNotify  Boolean  @default(false)
  signTeacher        Boolean  @default(false)
  dateStrekingQuiz   DateTime @default(now())
  dateStrekingCourse DateTime @default(now())
  courseDo           Boolean  @default(false)
  courseNotify       Boolean  @default(false)
  quizDo             Boolean  @default(false)
  quizNotify         Boolean  @default(false)
  quizStreakCount    Int      @default(0)
  teacherStreakCount Int      @default(0)

  // Policies:
  // • Only the owner (by userId) or an admin may read, update, or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read, update, delete", if: "session.userId == userId || isAdmin()")
}

model RefUser {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  app         String
  date        DateTime
  email       String
  isPaid      String
  isVerified  Boolean
  partnerId   String
  refCoUsed   String
  userRefMail String

  // Policies:
  // • Only authenticated users may create a referral record.
  // • Only the owner (by userRefMail) or an admin may read, update, or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read, update, delete", if: "session.userEmail == userRefMail || isAdmin()")
}

model Transaction {
  id                String   @id @map("_id") @default(auto()) @db.ObjectId
  email             String   @unique
  duration          String
  subscriptionStart DateTime
  subscriptionEnd   DateTime
  orderId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Policies:
  // • Only authenticated users may create transactions.
  // • Only the owner (by email) or an admin may read, update, or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read, update, delete", if: "session.userEmail == email || isAdmin()")
}

//////////////////////////
//      Game Models
//////////////////////////

model Game {
  id          String     @id @map("_id") @default(auto()) @db.ObjectId
  userId      String     // reference to User.id
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  language    String
  questions   Question[] @relation("GameQuestions")

  // Policies:
  // • Only authenticated users may create a game.
  // • Only the owner (by userId) or an admin may read, update, or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read, update, delete", if: "session.userId == userId || isAdmin()")
}

model Question {
  id                String   @id @map("_id") @default(auto()) @db.ObjectId
  question          String
  answer            String
  gameId            String
  options           Json?
  percentageCorrect Float?
  questionType      GameType
  userAnswer        String?
  isCorrect         Boolean?
  game              Game     @relation("GameQuestions", fields: [gameId], references: [id])

  // Policies:
  // • Only authenticated users may create a question.
  // • Only the owner of the related game or an admin may read, update, or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read, update, delete", if: "game.userId == session.userId || isAdmin()")
}

model TopicCount {
  id    String @id @map("_id") @default(auto()) @db.ObjectId
  topic String @unique
  count Int

  // Policies:
  // • Only authenticated users may create a topic count.
  // • Only an admin may read, update, or delete.
  @@allow("create", if: "isAuthenticated()")
  @@allow("read, update, delete", if: "isAdmin()")
}

//////////////////////////
//       Enums
//////////////////////////

enum GameType {
  mcq
  open_ended
}